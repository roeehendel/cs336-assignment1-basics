#!/bin/bash
set -euo pipefail

# Configuration
SCRIPT_DIR="$(dirname "$0")"
PROJECT_ID=$(gcloud config get-value project)
ZONE="europe-west4-a"          # Tel-Aviv (primary)
# Backup zones for A100 availability (same region as shared disk)
A100_ZONES=("me-west1-b" "me-west1-a" "me-west1-c")
REGION="europe-west4"
SHARED_BOOT_DISK="cs336-shared-boot"
SHARED_DISK_SIZE="400GB"
SHUTDOWN_HOURS=8           # auto-halt time

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 <command> [vm_type]"
    echo ""
    echo "Commands:"
    echo "  start <type>    Start a VM (a100|t4|cpu)"
    echo "  stop <type>     Stop a VM"
    echo "  switch <type>   Switch to a different VM type (stops current, starts new)"
    echo "  migrate <zone>  Migrate shared disk to a new zone (for better GPU availability)"
    echo "  status          Show status of all VMs"
    echo "  ssh <type>      SSH into a running VM"
    echo "  cleanup         Stop all VMs and optionally delete them"
    echo ""
    echo "VM Types:"
    echo "  a100   - A2 machine with A100 GPU (for large-scale training)"
    echo "  v100   - N1 machine with V100 GPU (for training)"
    echo "  t4     - N1 machine with T4 GPU (for development/inference)"
    echo "  cpu    - N1 machine CPU-only (for testing)"
    echo ""
    echo "Examples:"
    echo "  $0 start t4               # Start T4 VM"
    echo "  $0 switch a100            # Switch from current VM to A100"
    echo "  $0 migrate europe-west4-a # Move disk to Netherlands for A100 availability"
    echo "  $0 status                 # Show all VM statuses"
}

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

get_vm_config() {
    local vm_type="$1"
    case "$vm_type" in
        "a100")
            echo "cs336-a100 a2-highgpu-1g "
            ;;
        "v100")
            echo "cs336-v100 n1-standard-4 --accelerator=type=nvidia-tesla-v100,count=1"
            ;;
        "t4")
            echo "cs336-t4 n1-standard-4 --accelerator=type=nvidia-tesla-t4,count=1"
            ;;
        "cpu")
            echo "cs336-cpu n1-standard-4 "
            ;;
        *)
            error "Unknown VM type: $vm_type"
            echo "Valid types: a100, v100, t4, cpu"
            exit 1
            ;;
    esac
}

get_all_vm_types() {
    echo "a100 v100 t4 cpu"
}

parse_vm_config() {
    local config="$1"
    local instance_name machine_type accelerator_flags
    read -r instance_name machine_type accelerator_flags <<< "$config"
    echo "$instance_name" "$machine_type" "$accelerator_flags"
}

vm_exists() {
    local instance_name="$1"
    gcloud compute instances describe "$instance_name" --zone="$ZONE" &>/dev/null
}

get_vm_status() {
    local instance_name="$1"
    if vm_exists "$instance_name"; then
        gcloud compute instances describe "$instance_name" --zone="$ZONE" --format="value(status)"
    else
        echo "NOT_FOUND"
    fi
}

ensure_shared_disk() {
    if ! gcloud compute disks describe "$SHARED_BOOT_DISK" --zone="$ZONE" &>/dev/null; then
        log "Creating shared boot disk: $SHARED_BOOT_DISK"
        
        log "Using PyTorch DLVM with automatic dependency installation"
        gcloud compute disks create "$SHARED_BOOT_DISK" \
            --size="$SHARED_DISK_SIZE" \
            --type=pd-ssd \
            --image-family=pytorch-latest-gpu \
            --image-project=deeplearning-platform-release \
            --zone="$ZONE"
    fi
}

check_disk_availability() {
    local disk_users
    disk_users=$(gcloud compute disks describe "$SHARED_BOOT_DISK" --zone="$ZONE" --format="value(users)" 2>/dev/null || echo "")
    if [[ -n "$disk_users" ]]; then
        # Check status of all instances using the disk
        local running_users=""
        local stopped_users=""
        for user_url in $disk_users; do
            # Extract instance name from the full URL
            local instance_name
            instance_name=$(basename "$user_url")
            local status
            status=$(get_vm_status "$instance_name")
            if [[ "$status" == "RUNNING" ]]; then
                running_users="$running_users $instance_name"
            elif [[ "$status" == "TERMINATED" || "$status" == "STOPPED" ]]; then
                stopped_users="$stopped_users $instance_name"
            fi
        done
        
        # If there are running instances, error out
        if [[ -n "$running_users" ]]; then
            error "Shared boot disk is currently in use by running instance(s):$running_users"
            echo "Stop the running instance(s) first with: $0 stop <type>"
            exit 1
        fi
        
        # If there are stopped instances, delete them to free the disk
        if [[ -n "$stopped_users" ]]; then
            warn "Shared boot disk is attached to stopped instance(s):$stopped_users"
            log "Deleting stopped instances to free the disk..."
            for instance_name in $stopped_users; do
                log "Deleting stopped instance: $instance_name"
                gcloud compute instances delete "$instance_name" --zone="$ZONE" --quiet
            done
        fi
    fi
}

create_vm_in_zone() {
    local vm_type="$1"
    local zone="$2"
    local config
    config=$(get_vm_config "$vm_type")
    read -r instance_name machine_type accelerator_flags <<< "$(parse_vm_config "$config")"
    
    log "Trying to create $instance_name in zone $zone..."
    
    local create_cmd="gcloud compute instances create \"$instance_name\" \
        --machine-type=\"$machine_type\" \
        --disk=name=\"$SHARED_BOOT_DISK\",boot=yes,auto-delete=no \
        --maintenance-policy=TERMINATE \
        --preemptible \
        --metadata-from-file=startup-script=\"$SCRIPT_DIR/vm_setup.sh\" \
        --metadata=SHUTDOWN_MINUTES=\$((SHUTDOWN_HOURS * 60)) \
        --tags=ssh \
        --zone=\"$zone\""
    
    if [[ -n "$accelerator_flags" ]]; then
        create_cmd="$create_cmd $accelerator_flags"
    fi
    
    if eval "$create_cmd"; then
        # Update global ZONE variable for other operations
        ZONE="$zone"
        log "VM $instance_name created successfully in zone $zone!"
        return 0
    else
        warn "Failed to create VM in zone $zone - see error above"
        return 1
    fi
}

create_vm() {
    local vm_type="$1"
    local config
    config=$(get_vm_config "$vm_type")
    read -r instance_name machine_type accelerator_flags <<< "$(parse_vm_config "$config")"
    
    if vm_exists "$instance_name"; then
        error "Instance $instance_name already exists!"
        echo "Use '$0 start $vm_type' to start it, or delete it first."
        exit 1
    fi
    
    ensure_shared_disk
    check_disk_availability
    
    # Create VM in the zone where the shared disk exists
    create_vm_in_zone "$vm_type" "$ZONE"
    
    setup_ssh
}

start_vm() {
    local vm_type="$1"
    local config
    config=$(get_vm_config "$vm_type")
    read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
    
    if ! vm_exists "$instance_name"; then
        log "Instance $instance_name doesn't exist. Creating it..."
        create_vm "$vm_type"
        return
    fi
    
    local status
    status=$(get_vm_status "$instance_name")
    
    case "$status" in
        "RUNNING")
            log "Instance $instance_name is already running!"
            ;;
        "TERMINATED"|"STOPPED")
            log "Starting instance $instance_name..."
            gcloud compute instances start "$instance_name" --zone="$ZONE"
            log "Instance $instance_name started successfully!"
            ;;
        "STOPPING")
            error "Instance $instance_name is currently stopping. Please wait and try again."
            exit 1
            ;;
        *)
            error "Instance $instance_name is in unexpected state: $status"
            exit 1
            ;;
    esac
    
    setup_ssh
    show_connection_info "$instance_name" "$vm_type"
}

stop_vm() {
    local vm_type="$1"
    local config
    config=$(get_vm_config "$vm_type")
    read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
    
    if ! vm_exists "$instance_name"; then
        error "Instance $instance_name does not exist!"
        exit 1
    fi
    
    local status
    status=$(get_vm_status "$instance_name")
    
    case "$status" in
        "TERMINATED"|"STOPPED")
            log "Instance $instance_name is already stopped!"
            ;;
        "RUNNING")
            log "Stopping instance $instance_name..."
            gcloud compute instances stop "$instance_name" --zone="$ZONE"
            log "Instance $instance_name stopped successfully!"
            ;;
        "STOPPING")
            log "Instance $instance_name is already stopping..."
            ;;
        *)
            error "Instance $instance_name is in unexpected state: $status"
            exit 1
            ;;
    esac
}

switch_vm() {
    local target_type="$1"
    
    log "Switching to $target_type VM..."
    
    # Stop and delete all other VMs to free the shared disk
    for vm_type in $(get_all_vm_types); do
        if [[ "$vm_type" != "$target_type" ]]; then
            local config
            config=$(get_vm_config "$vm_type")
            read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
            
            if vm_exists "$instance_name"; then
                local status
                status=$(get_vm_status "$instance_name")
                if [[ "$status" == "RUNNING" ]]; then
                    log "Stopping $vm_type VM ($instance_name)..."
                    stop_vm "$vm_type"
                fi
                # Delete the instance to free the shared disk
                log "Deleting $vm_type VM ($instance_name) to free shared disk..."
                gcloud compute instances delete "$instance_name" --zone="$ZONE" --quiet
            fi
        fi
    done
    
    # Start the target VM
    start_vm "$target_type"
}

show_status() {
    echo -e "${BLUE}VM Status Overview:${NC}"
    echo "===================="
    
    for vm_type in $(get_all_vm_types); do
        local config
        config=$(get_vm_config "$vm_type")
        read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
        
        local status
        status=$(get_vm_status "$instance_name")
        
        local status_color
        case "$status" in
            "RUNNING") status_color="$GREEN" ;;
            "STOPPED"|"TERMINATED") status_color="$YELLOW" ;;
            "NOT_FOUND") status_color="$RED" ;;
            *) status_color="$NC" ;;
        esac
        
        printf "%-6s %-15s ${status_color}%s${NC}\n" "$vm_type" "$instance_name" "$status"
    done
    
    echo ""
    # Show shared disk status
    if gcloud compute disks describe "$SHARED_BOOT_DISK" --zone="$ZONE" &>/dev/null; then
        local disk_users
        disk_users=$(gcloud compute disks describe "$SHARED_BOOT_DISK" --zone="$ZONE" --format="value(users)" 2>/dev/null || echo "")
        if [[ -n "$disk_users" ]]; then
            echo -e "Shared disk: ${GREEN}In use${NC}"
        else
            echo -e "Shared disk: ${YELLOW}Available${NC}"
        fi
    else
        echo -e "Shared disk: ${RED}Not created${NC}"
    fi
}

ssh_vm() {
    local vm_type="$1"
    local config
    config=$(get_vm_config "$vm_type")
    read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
    
    local status
    status=$(get_vm_status "$instance_name")
    
    if [[ "$status" != "RUNNING" ]]; then
        error "Instance $instance_name is not running (status: $status)"
        echo "Start it first with: $0 start $vm_type"
        exit 1
    fi
    
    setup_ssh
    exec gcloud compute ssh "$instance_name" --zone="$ZONE"
}

cleanup_vms() {
    echo -e "${YELLOW}This will stop all VMs. Continue? (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        for vm_type in $(get_all_vm_types); do
            local config
            config=$(get_vm_config "$vm_type")
            read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
            
            if vm_exists "$instance_name"; then
                local status
                status=$(get_vm_status "$instance_name")
                if [[ "$status" == "RUNNING" ]]; then
                    log "Stopping $vm_type VM..."
                    stop_vm "$vm_type"
                fi
            fi
        done
        
        echo ""
        echo -e "${YELLOW}Delete all VM instances as well? (y/N)${NC}"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            for vm_type in $(get_all_vm_types); do
                local config
                config=$(get_vm_config "$vm_type")
                read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
                
                if vm_exists "$instance_name"; then
                    log "Deleting $vm_type VM..."
                    gcloud compute instances delete "$instance_name" --zone="$ZONE" --quiet
                fi
            done
        fi
    fi
}

setup_ssh() {
    log "Updating SSH configuration..."
    gcloud compute config-ssh --project="$(gcloud config get-value project)"
}

show_connection_info() {
    local instance_name="$1"
    local vm_type="$2"
    
    local external_ip internal_ip
    external_ip=$(gcloud compute instances describe "$instance_name" --zone="$ZONE" --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
    internal_ip=$(gcloud compute instances describe "$instance_name" --zone="$ZONE" --format="value(networkInterfaces[0].networkIP)")
    
    echo ""
    echo -e "${GREEN}Instance $instance_name is ready!${NC}"
    echo "  Type: $vm_type"
    echo "  External IP: $external_ip"
    echo "  Internal IP: $internal_ip"
    echo ""
    echo "Connect with:"
    echo "  $0 ssh $vm_type"
    echo "  # OR"
    echo "  gcloud compute ssh $instance_name --zone=$ZONE"
    echo ""
    echo "Shared storage is available in your home directory"
}

migrate_disk() {
    local target_zone="$1"
    local target_region
    target_region=$(echo "$target_zone" | cut -d'-' -f1-2)
    
    if [[ -z "$target_zone" ]]; then
        error "Target zone required for migrate command"
        echo "Good zones for Israel with A100s: europe-west4-a, us-east1-a"
        exit 1
    fi
    
    log "Migrating shared disk from $ZONE to $target_zone..."
    
    # Check if any VMs are running
    for vm_type in $(get_all_vm_types); do
        local config
        config=$(get_vm_config "$vm_type")
        read -r instance_name _ _ <<< "$(parse_vm_config "$config")"
        
        if vm_exists "$instance_name"; then
            local status
            status=$(get_vm_status "$instance_name")
            if [[ "$status" == "RUNNING" ]]; then
                error "Cannot migrate disk while VMs are running!"
                echo "Stop all VMs first with: $0 cleanup"
                exit 1
            fi
        fi
    done
    
    # Clean up any stopped instances
    log "Cleaning up stopped instances..."
    check_disk_availability
    
    # Create snapshot
    local snapshot_name="cs336-migration-$(date +%Y%m%d-%H%M%S)"
    log "Creating snapshot: $snapshot_name"
    gcloud compute disks snapshot "$SHARED_BOOT_DISK" \
        --snapshot-names="$snapshot_name" \
        --zone="$ZONE"
    
    # Create new disk from snapshot in target zone
    log "Creating new disk in $target_zone from snapshot..."
    gcloud compute disks create "$SHARED_BOOT_DISK" \
        --size="$SHARED_DISK_SIZE" \
        --type=pd-ssd \
        --source-snapshot="$snapshot_name" \
        --zone="$target_zone"
    
    # Delete old disk
    log "Deleting old disk in $ZONE..."
    gcloud compute disks delete "$SHARED_BOOT_DISK" --zone="$ZONE" --quiet
    
    # Update script configuration
    log "Updating zone configuration in script..."
    sed -i.bak "s/ZONE=\"$ZONE\"/ZONE=\"$target_zone\"/" "$0"
    sed -i.bak "s/REGION=\"$REGION\"/REGION=\"$target_region\"/" "$0"
    
    # Clean up snapshot (optional - you can keep it as backup)
    echo ""
    echo -e "${YELLOW}Delete migration snapshot? (saves storage costs) (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        log "Deleting snapshot: $snapshot_name"
        gcloud compute snapshots delete "$snapshot_name" --quiet
    else
        log "Keeping snapshot: $snapshot_name (delete manually later to save costs)"
    fi
    
    log "Migration complete! New zone: $target_zone"
    log "You can now try: $0 start a100"
}

# Main command handling
COMMAND="${1:-}"
VM_TYPE="${2:-}"

case "$COMMAND" in
    "start")
        if [[ -z "$VM_TYPE" ]]; then
            error "VM type required for start command"
            usage
            exit 1
        fi
        start_vm "$VM_TYPE"
        ;;
    "stop")
        if [[ -z "$VM_TYPE" ]]; then
            error "VM type required for stop command"
            usage
            exit 1
        fi
        stop_vm "$VM_TYPE"
        ;;
    "switch")
        if [[ -z "$VM_TYPE" ]]; then
            error "VM type required for switch command"
            usage
            exit 1
        fi
        switch_vm "$VM_TYPE"
        ;;
    "migrate")
        if [[ -z "$VM_TYPE" ]]; then
            error "Target zone required for migrate command"
            usage
            exit 1
        fi
        migrate_disk "$VM_TYPE"
        ;;
    "status")
        show_status
        ;;
    "ssh")
        if [[ -z "$VM_TYPE" ]]; then
            error "VM type required for ssh command"
            usage
            exit 1
        fi
        ssh_vm "$VM_TYPE"
        ;;
    "cleanup")
        cleanup_vms
        ;;
    "help"|"-h"|"--help"|"")
        usage
        ;;
    *)
        error "Unknown command: $COMMAND"
        usage
        exit 1
        ;;
esac 